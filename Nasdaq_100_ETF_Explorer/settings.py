"""
Django settings for Nasdaq_100_ETF_Explorer project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os

SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-bpon6--g&2^^lns4rva^p%arlh=rt&)fdi8xahsq%t^46j_bou')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'False'

# Security settings
SECURE_SSL_REDIRECT = True  # Redirect all non-HTTPS requests to HTTPS.
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Trust the `X-Forwarded-Proto` header.

# Strict-Transport-Security header (ensure browsers only access the site over HTTPS for the next year)
SECURE_HSTS_SECONDS = 31536000  # 1 year in seconds
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Prevent the browser from guessing the content type and executing scripts from non-executable MIME types
SECURE_CONTENT_TYPE_NOSNIFF = True

# Other security settings you might consider:
# CSRF_COOKIE_SECURE = True  # Only send CSRF cookies over HTTPS.
# SESSION_COOKIE_SECURE = True  # Only send session cookies over HTTPS.


# Retrieve port from environment variable or default to 8000
PORT = int(os.environ.get('PORT', 8000))


ALLOWED_HOSTS = ['*']  # Assuming you're allowing all hosts for simplicity

CORS_ALLOWED_ORIGINS = [
    "http://localhost",
    "http://localhost:80",
    "http://127.0.0.1",
    "http://127.0.0.1:80",
    "https://nasdaq-100-webapp-frontend-9efe14c7926a.herokuapp.com", 
]

# settings.py

NEWS_API_URL = "https://api.marketaux.com/v1/news/all?symbols=AAPL%2CAMZN%2CMSFT&filter_entities=true&language=en&api_token=VaKWXXrS914a2GtHtskWhqNelbn5vsDSCGT63Zm3"
API_TQQQ_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=TQQQ&interval=30min&outputsize=full&extended_hours=false&apikey=SWHMUAOL1RMD6V3X"
API_SQQQ_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=SQQQ&interval=30min&outputsize=full&extended_hours=false&apikey=SWHMUAOL1RMD6V3X"
API_QQQ_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=QQQ&interval=30min&outputsize=full&extended_hours=false&apikey=SWHMUAOL1RMD6V3X"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'rest_framework',
    'corsheaders',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'Nasdaq_100_ETF_Explorer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Nasdaq_100_ETF_Explorer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
